#!/bin/bash

function helpme {
  echo -e "  Required options:"
  echo -e "\t-o|--output <filename.<ext>>  : Output neut file, <ext>=[hepmc3, root]"
  echo -e "\t-n|--nevents <numevents>       : Specify the number of events to process or generate."
  echo -e ""
  echo -e "  Or: "
  echo -e ""
  echo -e "\t--output-card <filename.card>  : Output card file"
  echo -e ""
  echo -e "  Options:"
  echo -e "\t--neut-card <neut.card>        : NEUT card to specialize"
  echo -e "\t--neut-param <pname> <val>     : Specify arbitrary NEUT parameters."
  echo -e "\t                                 This will override parameters in the base card or set elsewhere "
  echo -e "\t                                 in this script."
  echo -e "\t                                 This can be used more than once."
  echo -e "\t-t|--target <C|O|CH|H2O|Fe>       : Specify the target nucleus/molecule."
  echo -e "\t-s|--species <nu[mu,e][,b]>       : Specify the neutrino species."
  echo -e "\t-f|--flux <file.root><,histname>  : Throw an event rate according to flux * cross section. "
  echo -e "\t                                 Flux histogram should be binned in GeV."
  echo -e "\t--uniform <from> <to>          : Throw a uniform event rate as a function of energy in MeV."
  echo -e "\t--mono-E <E>                   : Throw a events with energy E in MeV."
  echo -e ""
  echo -e "\t--verbose                      : Let NEUT say its thing"
  echo -e "\t--force                        : Continue even if output file already exists"
  echo -e "\t--debug                        : Copy NEUT card file and intermediate neutvect.root file, if it"
  echo -e "\t                                 iexists, back to the output directory."

  echo -e ""
  echo -e "\t--help                         : Print this message"
}

function SetNeutParam () {
  local CARD=${1}
  local PNAME=${2}
  local VAL=${3}

  if cat ${CARD} | grep "^${PNAME}" &> /dev/null; then
    cat ${CARD} | sed "s:^${PNAME}.*$:${PNAME} ${VAL}:" > ${CARD}_
    mv ${CARD}_ ${CARD}
  else
    echo "${PNAME} ${VAL}" >> ${CARD}
  fi
}

SPECIES="numu"
TARGET="H2O"
NEUT_CARD="${NEUT_CARDS}/neut_5.4.0_1GeV_C.card"
USE_FLUX=""
NEVENTS=""
QUIET="1"
DEBUG="0"
FORCE="0"

declare -A NEUT_PARAMS

OUTPUTFILE=
OUTPUTCARD=

set -e

while [[ ${#} -gt 0 ]]; do

  key="$1"
  case $key in

    -o|--output)

      if [[ ${#} -lt 2 ]]; then
        echo "[ERROR]: ${1} expected a value."
        exit 1
      fi

      OUTPUTFILE="${2}"
      echo "[OPT]: Writing final output to ${OUTPUTFILE}"
      shift # past argument
      ;;

    --output-card)

      if [[ ${#} -lt 2 ]]; then
        echo "[ERROR]: ${1} expected a value."
        exit 1
      fi

      OUTPUTCARD="${2}"
      echo "[OPT]: Writing output card file to ${OUTPUTCARD}"
      shift # past argument
      ;;

    -t|--target)

      if [[ ${#} -lt 2 ]]; then
        echo "[ERROR]: ${1} expected a value."
        exit 1
      fi

      TARGET="${2}"
      echo "[OPT]: Generating events on: ${TARGET}"
      shift # past argument
      ;;

    -s|--species)

      if [[ ${#} -lt 2 ]]; then
        echo "[ERROR]: ${1} expected a value."
        exit 1
      fi

      SPECIES="${2}"
      echo "[OPT]: Generating ${SPECIES} events."
      shift # past argument
      ;;

    --neut-card)

      if [[ ${#} -lt 2 ]]; then
        echo "[ERROR]: ${1} expected a value."
        exit 1
      fi

      NEUT_CARD="$2"
      echo "[OPT]: Using NEUT_CARD: ${NEUT_CARD}"
      shift # past argument
      ;;

    --neut-param)

      if [[ ${#} -lt 3 ]]; then
        echo "[ERROR]: ${1} expected two values."
        exit 1
      fi

      NEUT_PARAMS[${2}]=${3}
      echo "[OPT]: Setting NEUT parameter ${2} to ${NEUT_PARAMS[${2}]}."
      shift # past argument
      shift # past argument
      ;;

    -f|--flux)
      if [[ ${#} -lt 2 ]]; then
        echo "[ERROR]: ${1} expected a value."
        exit 1
      fi

      USE_FLUX=${2}
      echo "[OPT]: Generating events with the a flux distribution according to ${2}"
      shift # past argument
      ;;
    --uniform)

      if [[ ${#} -lt 3 ]]; then
        echo "[ERROR]: ${1} expected two values."
        exit 1
      fi

      NEUT_PARAMS[EVCT-MPV]="2"
      NEUT_PARAMS[EVCT-PV]="${2} ${3}"
      echo "[OPT]: Generating events with a uniform energy distribution between ${NEUT_PARAMS[EVCT-PV]}."
      shift # past argument
      shift # past argument
      ;;

    --mono-E)

      if [[ ${#} -lt 2 ]]; then
        echo "[ERROR]: ${1} expected a value."
        exit 1
      fi

      NEUT_PARAMS[EVCT-MPV]="1"
      NEUT_PARAMS[EVCT-PV]="${2}"
      echo "[OPT]: Generating events with a mono energetic flux: ${NEUT_PARAMS[EVCT-PV]} MeV"
      shift # past argument
      ;;

    -n|--nevents)

      if [[ ${#} -lt 2 ]]; then
        echo "[ERROR]: ${1} expected a value."
        exit 1
      fi

      NEVENTS="${2}"
      NEUT_PARAMS[EVCT-NEVT]="${NEVENTS}"
      echo "[OPT]: Processing/Generating ${NEVENTS} NEUT events."
      shift # past argument
      ;;

    --verbose)
      QUIET="0"
      echo "[OPT]: Running NEUT verbosely"
      ;;

    --debug)
      DEBUG="1"
      echo "[OPT]: Running script debuggingly"
      set -x
      ;;

    --force)
      FORCE="1"
      echo "[OPT]: Running script forcibly"
      ;;

    --help)
      helpme
      exit 0
      ;;

    *)
      # unknown option
      echo "Unknown option $1"
      helpme
      exit 1
      ;;
  esac
  shift # past argument or value
done

if [ ! -e ${NEUT_CARD} ]; then
  echo "[ERROR]: No such card file: ${NEUT_CARD}"
  exit 1
fi

if [ "${TARGET}" == "H" ]; then
  NEUT_PARAMS[NEUT-NUMBNDN]=0
  NEUT_PARAMS[NEUT-NUMBNDP]=1
  NEUT_PARAMS[NEUT-NUMFREP]=0
  NEUT_PARAMS[NEUT-NUMATOM]=1
  NEUT_PARAMS[NEUT-NEFF]="1"
  NEUT_PARAMS[NUCRES-RESCAT]="0"
  NEUT_PARAMS[NEUT-NUCDEXITE]="0"
  NEUT_PARAMS[NEUT-PIABSEMIT]="0"
elif [ "${TARGET}" == "C" ]; then
  NEUT_PARAMS[NEUT-NUMBNDN]=6
  NEUT_PARAMS[NEUT-NUMBNDP]=6
  NEUT_PARAMS[NEUT-NUMFREP]=0
  NEUT_PARAMS[NEUT-NUMATOM]=12
elif [ "${TARGET}" == "O" ]; then
  NEUT_PARAMS[NEUT-NUMBNDN]=8
  NEUT_PARAMS[NEUT-NUMBNDP]=8
  NEUT_PARAMS[NEUT-NUMFREP]=0
  NEUT_PARAMS[NEUT-NUMATOM]=16
elif [ "${TARGET}" == "CH" ]; then
  NEUT_PARAMS[NEUT-NUMBNDN]=6
  NEUT_PARAMS[NEUT-NUMBNDP]=6
  NEUT_PARAMS[NEUT-NUMFREP]=1
  NEUT_PARAMS[NEUT-NUMATOM]=12
elif [ "${TARGET}" == "H2O" ]; then
  NEUT_PARAMS[NEUT-NUMBNDN]=8
  NEUT_PARAMS[NEUT-NUMBNDP]=8
  NEUT_PARAMS[NEUT-NUMFREP]=2
  NEUT_PARAMS[NEUT-NUMATOM]=16
elif [ "${TARGET}" == "Ar" ]; then
  NEUT_PARAMS[NEUT-NUMBNDN]=22
  NEUT_PARAMS[NEUT-NUMBNDP]=18
  NEUT_PARAMS[NEUT-NUMFREP]=0
  NEUT_PARAMS[NEUT-NUMATOM]=40
  NEUT_PARAMS[NEUT-MDLQE]=02
elif [ "${TARGET}" == "Fe" ]; then
  NEUT_PARAMS[NEUT-NUMBNDN]=30
  NEUT_PARAMS[NEUT-NUMBNDP]=26
  NEUT_PARAMS[NEUT-NUMFREP]=0
  NEUT_PARAMS[NEUT-NUMATOM]=56
elif [ "${TARGET}" == "Pb" ]; then
  NEUT_PARAMS[NEUT-NUMBNDN]=126
  NEUT_PARAMS[NEUT-NUMBNDP]=82
  NEUT_PARAMS[NEUT-NUMFREP]=0
  NEUT_PARAMS[NEUT-NUMATOM]=208
else  
  echo "Unsupported target: ${TARGET}, should be C or O, Pb, Fe, CH, or H2O."
  exit 1
fi

if [ "${SPECIES}" == "numu" ]; then
  NEUT_PARAMS[EVCT-IDPT]=14
elif [ "${SPECIES}" == "numub" ]; then
  NEUT_PARAMS[EVCT-IDPT]=-14
elif [ "${SPECIES}" == "nutau" ]; then
  NEUT_PARAMS[EVCT-IDPT]=16
elif [ "${SPECIES}" == "nutaub" ]; then
  NEUT_PARAMS[EVCT-IDPT]=-16
elif [ "${SPECIES}" == "nue" ]; then
  NEUT_PARAMS[EVCT-IDPT]=12
elif [ "${SPECIES}" == "nueb" ]; then
  NEUT_PARAMS[EVCT-IDPT]=-12
else
  echo "Unsupported neutrino species: ${SPECIES}, should be numu, nutau, nue, numub,, nutaub, or nueb."
  exit 1
fi

FLUX_FILE=""
if [ ! -z "${USE_FLUX}" ]; then

  OLD_IFS=${IFS}
  IFS=","

  set -- ${USE_FLUX}

  FLUX_FILE=${1}
  FLUX_HIST=${2}

  IFS=${OLD_IFS}  

  if [ ! -e "${FLUX_FILE}" ]; then
    echo "File ${FLUX_FILE} passed as flux file, but it does not exist."
    exit 1
  fi

  FLUX_FILE_BASENAME=$(basename ${FLUX_FILE})

  NEUT_PARAMS[EVCT-MPV]="3"
  NEUT_PARAMS[EVCT-FILENM]="'${FLUX_FILE_BASENAME}'"
  NEUT_PARAMS[EVCT-HISTNM]="'${FLUX_HIST}'"
  NEUT_PARAMS[EVCT-INMEV]="0"
fi


if [ ! -z "${OUTPUTFILE}" ]; then
  FQP_OUTPUTFILE=$(readlink -f ${OUTPUTFILE})
  BASENAME_OUTPUTFILE=$(basename ${OUTPUTFILE})
fi

if [ ! -z "${OUTPUTCARD}" ]; then
  FQP_OUTPUTCARD=$(readlink -f ${OUTPUTCARD})
fi

THISRANDOM=${RANDOM}
RUNDIR="/tmp/neut-quickstart/${THISRANDOM}"
mkdir -p ${RUNDIR}

cat ${NEUT_CARD} | sed "s/^NEUT-CRSPATH/CNEUT-CRSPATH/g" > ${RUNDIR}/NEUT.card
if [ ! -z "${FLUX_FILE}" ]; then
  cp ${FLUX_FILE} ${RUNDIR}/
fi

cd ${RUNDIR}

echo "[NEUT] Running in ${RUNDIR}"

for NEUT_PARAM in "${!NEUT_PARAMS[@]}"; do
  SetNeutParam NEUT.card ${NEUT_PARAM} "${NEUT_PARAMS[${NEUT_PARAM}]}"
done

FQP_CARDNAME=$(readlink -f NEUT.card)

if [ "${DEBUG}" == "1" ]; then
  NEUT_CARD_OUT=NEUT.${THISRANDOM}.card
  echo "[INFO]: Placing NEUT card in: ${NEUT_CARD_OUT}"
  cp ${FQP_CARDNAME} ${OLDPWD}/${NEUT_CARD_OUT}
fi

if [ ! -z "${OUTPUTCARD}" ]; then
  cp NEUT.card ${FQP_OUTPUTCARD}
  if [ -z "${OUTPUTFILE}" ]; then
    exit 0
  fi
fi

FQP_BASENAME_OUTPUTFILE=$(readlink -f ${BASENAME_OUTPUTFILE})
DIRNAME_OUTPUTFILE=$(dirname ${OUTPUTFILE})

if [ -z "${OUTPUTFILE}" ]; then
  echo "[ERROR]: Expected to be passed an output file name with -o"
  helpme
  exit 1
fi

if [ "${FORCE}" == "0" ] && [ -e "${OUTPUTFILE}" ]; then
  echo "[ERROR]: Not overwriting output file without --force"
  exit 1
fi

if [ "${QUIET}" == "0" ]; then
  neutroot2 NEUT.card neutvect.root
else
  neutroot2 NEUT.card neutvect.root &> /dev/null
fi

if [ -e "neutvect.root" ]; then
  if [ "${DEBUG}" == "1" ]; then
    NEUT_VECT_OUT=neutvect.${THISRANDOM}.card
    echo "[INFO]: Placing NEUT neutvect.root in: ${NEUT_VECT_OUT}"
    cp neutvect.root ${OLDPWD}/${NEUT_VECT_OUT}
  fi

  EXTENSION_OUTPUTFILE="${BASENAME_OUTPUTFILE##*.}"

  if [ "${EXTENSION_OUTPUTFILE}" == "hepmc3" ]; then
    if [ ! -z "${FLUX_FILE_BASENAME}" ]; then
      neutvect-converter -i neutvect.root -f "${FLUX_FILE_BASENAME},${FLUX_HIST}" -o ${FQP_BASENAME_OUTPUTFILE}
    else
      neutvect-converter -i neutvect.root -o ${FQP_BASENAME_OUTPUTFILE}
    fi
  elif [ "${EXTENSION_OUTPUTFILE}" == "root" ]; then
    mv neutvect.root  ${FQP_BASENAME_OUTPUTFILE}
  else
    OUTPUTFILE="${OUTPUTFILE}.root"
    echo "[ERROR]: Invalid output file extension, writing to ${OUTPUTFILE} instead."
    mv neutvect.root  ${FQP_BASENAME_OUTPUTFILE}
  fi
  cd ${OLDPWD}

  cp ${FQP_BASENAME_OUTPUTFILE} ${OUTPUTFILE}

  rm -r ${RUNDIR}

else

  echo "[ERROR]: NEUT run failed to produce expected output file (neutvect.root)."

  cd ${OLDPWD}

  rm -r ${RUNDIR}

fi

